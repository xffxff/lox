execute: Some(
    Closure {
        function: Function {
            name: "fib",
            arity: 1,
            chunk: Chunk {
                code: [
                    ReadLocalVariable {
                        index_in_stack: 0,
                    },
                    Constant(
                        F64(
                            1.0,
                        ),
                    ),
                    LessEqual,
                    JumpIfFalse(
                        8,
                    ),
                    Pop,
                    ReadLocalVariable {
                        index_in_stack: 0,
                    },
                    Return,
                    Jump(
                        9,
                    ),
                    Pop,
                    ReadGlobalVariable {
                        name: "fib",
                    },
                    ReadLocalVariable {
                        index_in_stack: 0,
                    },
                    Constant(
                        F64(
                            1.0,
                        ),
                    ),
                    Subtract,
                    Call {
                        arity: 1,
                    },
                    ReadGlobalVariable {
                        name: "fib",
                    },
                    ReadLocalVariable {
                        index_in_stack: 0,
                    },
                    Constant(
                        F64(
                            2.0,
                        ),
                    ),
                    Subtract,
                    Call {
                        arity: 1,
                    },
                    Add,
                    Return,
                ],
            },
        },
        upvalues: [],
    },
)
stack: [<func main>, <func fib>]
stdout: ""

execute: Some(
    GlobalVarDeclaration {
        name: "fib",
    },
)
stack: [<func main>]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>]
stdout: ""

execute: Some(
    Constant(
        F64(
            5.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 5]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 5, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, false]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, false]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 5]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 5, 1]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 4]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 4, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, false]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, false]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 4]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 4, 1]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 3]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 3, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, false]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, false]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 3]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 3, 1]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 2, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, false]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, false]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 2, 1]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 1, 1, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 1, true]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 1, true]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            2.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 2, 2]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, 0]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, 0, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, true]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, true]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, 0]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1, 0]
stdout: ""

execute: Some(
    Add,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, <func fib>, 2, 1]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 3]
stdout: ""

execute: Some(
    Constant(
        F64(
            2.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 3, 2]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 1]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 1, 1, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 1, true]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 1, true]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 1, 1]
stdout: ""

execute: Some(
    Add,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, <func fib>, 3, 2]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 4]
stdout: ""

execute: Some(
    Constant(
        F64(
            2.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 4, 2]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 2, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, false]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, false]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 2, 1]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 1, 1, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 1, true]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 1, true]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            2.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 2, 2]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 0, 0]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 0, 0, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 0, true]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 0, true]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, <func fib>, 0, 0]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1, 0]
stdout: ""

execute: Some(
    Add,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, <func fib>, 2, 1]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 2, 1]
stdout: ""

execute: Some(
    Add,
)
stack: [<func main>, <func fib>, 5, <func fib>, 4, 3]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, 3]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 5]
stdout: ""

execute: Some(
    Constant(
        F64(
            2.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 5, 2]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 3]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 3, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, false]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, false]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 3]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 3, 1]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 2, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, false]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, false]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 2, 1]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 1, 1, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 1, true]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 1, true]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 2]
stdout: ""

execute: Some(
    Constant(
        F64(
            2.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 2, 2]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, 0]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, 0, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, true]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, true]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, <func fib>, 0, 0]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1, 0]
stdout: ""

execute: Some(
    Add,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, <func fib>, 2, 1]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1]
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "fib",
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 3]
stdout: ""

execute: Some(
    Constant(
        F64(
            2.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 3, 2]
stdout: ""

execute: Some(
    Subtract,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 1]
stdout: ""

execute: Some(
    Call {
        arity: 1,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 1, 1, 1]
stdout: ""

execute: Some(
    LessEqual,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 1, true]
stdout: ""

execute: Some(
    JumpIfFalse(
        8,
    ),
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 1, true]
stdout: ""

execute: Some(
    Pop,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 1]
stdout: ""

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, <func fib>, 1, 1]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 1, 1]
stdout: ""

execute: Some(
    Add,
)
stack: [<func main>, <func fib>, 5, 3, <func fib>, 3, 2]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, <func fib>, 5, 3, 2]
stdout: ""

execute: Some(
    Add,
)
stack: [<func main>, <func fib>, 5, 5]
stdout: ""

execute: Some(
    Return,
)
stack: [<func main>, 5]
stdout: ""

execute: Some(
    Print,
)
stack: [<func main>]
stdout: "5\n"

execute: None
stack: []
stdout: "5\n"

