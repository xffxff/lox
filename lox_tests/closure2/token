TokenTree {
    source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
    tokens: [
        Alphabetic(fun),
        Whitespace(' '),
        Alphabetic(outer),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                tokens: [],
            },
        ),
        Delimiter()),
        Whitespace(' '),
        Delimiter({),
        Tree(
            TokenTree {
                source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                tokens: [
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(var),
                    Whitespace(' '),
                    Alphabetic(x),
                    Whitespace(' '),
                    Op(=),
                    Whitespace(' '),
                    String(value),
                    Semicolon,
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(fun),
                    Whitespace(' '),
                    Alphabetic(middle),
                    Delimiter((),
                    Tree(
                        TokenTree {
                            source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                            tokens: [],
                        },
                    ),
                    Delimiter()),
                    Whitespace(' '),
                    Delimiter({),
                    Tree(
                        TokenTree {
                            source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                            tokens: [
                                Whitespace('\n'),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Alphabetic(fun),
                                Whitespace(' '),
                                Alphabetic(inner),
                                Delimiter((),
                                Tree(
                                    TokenTree {
                                        source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                                        tokens: [],
                                    },
                                ),
                                Delimiter()),
                                Whitespace(' '),
                                Delimiter({),
                                Tree(
                                    TokenTree {
                                        source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                                        tokens: [
                                            Whitespace('\n'),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Alphabetic(print),
                                            Whitespace(' '),
                                            Alphabetic(x),
                                            Semicolon,
                                            Whitespace('\n'),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                        ],
                                    },
                                ),
                                Delimiter(}),
                                Whitespace('\n'),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Alphabetic(inner),
                                Delimiter((),
                                Tree(
                                    TokenTree {
                                        source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                                        tokens: [],
                                    },
                                ),
                                Delimiter()),
                                Semicolon,
                                Whitespace('\n'),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                            ],
                        },
                    ),
                    Delimiter(}),
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(middle),
                    Delimiter((),
                    Tree(
                        TokenTree {
                            source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                            tokens: [],
                        },
                    ),
                    Delimiter()),
                    Semicolon,
                    Whitespace('\n'),
                ],
            },
        ),
        Delimiter(}),
        Whitespace('\n'),
        Whitespace('\n'),
        Alphabetic(outer),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun outer() {\n    var x = \"value\";\n    fun middle() {\n        fun inner() {\n            print x;\n        }\n        inner();\n    }\n    middle();\n}\n\nouter();",
                tokens: [],
            },
        ),
        Delimiter()),
        Semicolon,
    ],
}