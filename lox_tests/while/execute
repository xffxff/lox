execute: Some(
    Constant(
        F64(
            0.0,
        ),
    ),
)
stack: [0]
output: ""

execute: Some(
    GlobalVarDeclaration {
        name: "a",
    },
)
stack: []
output: ""

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [0]
output: ""

execute: Some(
    Constant(
        F64(
            5.0,
        ),
    ),
)
stack: [0, 5]
output: ""

execute: Some(
    Less,
)
stack: [true]
output: ""

execute: Some(
    JumpIfFalse(
        15,
    ),
)
stack: [true]
output: ""

execute: Some(
    Pop,
)
stack: []
output: ""

execute: Some(
    String(
        "hello",
    ),
)
stack: [hello]
output: ""

execute: Some(
    Print,
)
stack: []
output: "hello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [0]
output: "hello\n"

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [0, 1]
output: "hello\n"

execute: Some(
    Add,
)
stack: [1]
output: "hello\n"

execute: Some(
    Assign(
        "a",
    ),
)
stack: [1]
output: "hello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\n"

execute: Some(
    Jump(
        2,
    ),
)
stack: []
output: "hello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [1]
output: "hello\n"

execute: Some(
    Constant(
        F64(
            5.0,
        ),
    ),
)
stack: [1, 5]
output: "hello\n"

execute: Some(
    Less,
)
stack: [true]
output: "hello\n"

execute: Some(
    JumpIfFalse(
        15,
    ),
)
stack: [true]
output: "hello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\n"

execute: Some(
    String(
        "hello",
    ),
)
stack: [hello]
output: "hello\n"

execute: Some(
    Print,
)
stack: []
output: "hello\nhello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [1]
output: "hello\nhello\n"

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [1, 1]
output: "hello\nhello\n"

execute: Some(
    Add,
)
stack: [2]
output: "hello\nhello\n"

execute: Some(
    Assign(
        "a",
    ),
)
stack: [2]
output: "hello\nhello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\nhello\n"

execute: Some(
    Jump(
        2,
    ),
)
stack: []
output: "hello\nhello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [2]
output: "hello\nhello\n"

execute: Some(
    Constant(
        F64(
            5.0,
        ),
    ),
)
stack: [2, 5]
output: "hello\nhello\n"

execute: Some(
    Less,
)
stack: [true]
output: "hello\nhello\n"

execute: Some(
    JumpIfFalse(
        15,
    ),
)
stack: [true]
output: "hello\nhello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\nhello\n"

execute: Some(
    String(
        "hello",
    ),
)
stack: [hello]
output: "hello\nhello\n"

execute: Some(
    Print,
)
stack: []
output: "hello\nhello\nhello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [2]
output: "hello\nhello\nhello\n"

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [2, 1]
output: "hello\nhello\nhello\n"

execute: Some(
    Add,
)
stack: [3]
output: "hello\nhello\nhello\n"

execute: Some(
    Assign(
        "a",
    ),
)
stack: [3]
output: "hello\nhello\nhello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\nhello\nhello\n"

execute: Some(
    Jump(
        2,
    ),
)
stack: []
output: "hello\nhello\nhello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [3]
output: "hello\nhello\nhello\n"

execute: Some(
    Constant(
        F64(
            5.0,
        ),
    ),
)
stack: [3, 5]
output: "hello\nhello\nhello\n"

execute: Some(
    Less,
)
stack: [true]
output: "hello\nhello\nhello\n"

execute: Some(
    JumpIfFalse(
        15,
    ),
)
stack: [true]
output: "hello\nhello\nhello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\nhello\nhello\n"

execute: Some(
    String(
        "hello",
    ),
)
stack: [hello]
output: "hello\nhello\nhello\n"

execute: Some(
    Print,
)
stack: []
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [3]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [3, 1]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Add,
)
stack: [4]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Assign(
        "a",
    ),
)
stack: [4]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Jump(
        2,
    ),
)
stack: []
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [4]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Constant(
        F64(
            5.0,
        ),
    ),
)
stack: [4, 5]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Less,
)
stack: [true]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    JumpIfFalse(
        15,
    ),
)
stack: [true]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    String(
        "hello",
    ),
)
stack: [hello]
output: "hello\nhello\nhello\nhello\n"

execute: Some(
    Print,
)
stack: []
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [4]
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    Constant(
        F64(
            1.0,
        ),
    ),
)
stack: [4, 1]
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    Add,
)
stack: [5]
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    Assign(
        "a",
    ),
)
stack: [5]
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    Jump(
        2,
    ),
)
stack: []
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    ReadGlobalVariable {
        name: "a",
    },
)
stack: [5]
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    Constant(
        F64(
            5.0,
        ),
    ),
)
stack: [5, 5]
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    Less,
)
stack: [false]
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    JumpIfFalse(
        15,
    ),
)
stack: [false]
output: "hello\nhello\nhello\nhello\nhello\n"

execute: Some(
    Pop,
)
stack: []
output: "hello\nhello\nhello\nhello\nhello\n"

execute: None
stack: []
output: "hello\nhello\nhello\nhello\nhello\n"

