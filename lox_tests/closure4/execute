execute: Some(
    Closure {
        function: Function {
            name: "outer",
            arity: 0,
            chunk: Chunk {
                code: [
                    String(
                        "value",
                    ),
                    Closure {
                        function: Function {
                            name: "middle",
                            arity: 0,
                            chunk: Chunk {
                                code: [
                                    Closure {
                                        function: Function {
                                            name: "inner",
                                            arity: 0,
                                            chunk: Chunk {
                                                code: [
                                                    ReadUpvalue {
                                                        index: 0,
                                                    },
                                                    Print,
                                                ],
                                            },
                                        },
                                        upvalues: [
                                            Upvalue {
                                                index: 0,
                                                is_local: false,
                                            },
                                        ],
                                    },
                                    String(
                                        "create inner closure",
                                    ),
                                    Print,
                                    ReadLocalVariable {
                                        index_in_stack: 0,
                                    },
                                    Return,
                                    Pop,
                                ],
                            },
                        },
                        upvalues: [
                            Upvalue {
                                index: 0,
                                is_local: true,
                            },
                        ],
                    },
                    String(
                        "return from outer",
                    ),
                    Print,
                    ReadLocalVariable {
                        index_in_stack: 1,
                    },
                    Return,
                    Pop,
                    CloseUpvalue,
                ],
            },
        },
        upvalues: [],
    },
)
stack: [<func outer>]
stdout: ""

execute: Some(
    GlobalVarDeclaration {
        name: "outer",
    },
)
stack: []
stdout: ""

execute: Some(
    ReadGlobalVariable {
        name: "outer",
    },
)
stack: [<func outer>]
stdout: ""

execute: Some(
    Call {
        arity: 0,
    },
)
stack: [<func outer>]
stdout: ""

execute: Some(
    String(
        "value",
    ),
)
stack: [<func outer>, value]
stdout: ""

execute: Some(
    Closure {
        function: Function {
            name: "middle",
            arity: 0,
            chunk: Chunk {
                code: [
                    Closure {
                        function: Function {
                            name: "inner",
                            arity: 0,
                            chunk: Chunk {
                                code: [
                                    ReadUpvalue {
                                        index: 0,
                                    },
                                    Print,
                                ],
                            },
                        },
                        upvalues: [
                            Upvalue {
                                index: 0,
                                is_local: false,
                            },
                        ],
                    },
                    String(
                        "create inner closure",
                    ),
                    Print,
                    ReadLocalVariable {
                        index_in_stack: 0,
                    },
                    Return,
                    Pop,
                ],
            },
        },
        upvalues: [
            Upvalue {
                index: 0,
                is_local: true,
            },
        ],
    },
)
stack: [<func outer>, value, <func middle>]
stdout: ""

execute: Some(
    String(
        "return from outer",
    ),
)
stack: [<func outer>, value, <func middle>, return from outer]
stdout: ""

execute: Some(
    Print,
)
stack: [<func outer>, value, <func middle>]
stdout: "return from outer\n"

execute: Some(
    ReadLocalVariable {
        index_in_stack: 1,
    },
)
stack: [<func outer>, value, <func middle>, <func middle>]
stdout: "return from outer\n"

execute: Some(
    Return,
)
stack: [<func outer>, <func middle>]
stdout: "return from outer\n"

execute: Some(
    GlobalVarDeclaration {
        name: "mid",
    },
)
stack: [<func outer>]
stdout: "return from outer\n"

execute: Some(
    ReadGlobalVariable {
        name: "mid",
    },
)
stack: [<func outer>, <func middle>]
stdout: "return from outer\n"

execute: Some(
    Call {
        arity: 0,
    },
)
stack: [<func outer>, <func middle>]
stdout: "return from outer\n"

execute: Some(
    Closure {
        function: Function {
            name: "inner",
            arity: 0,
            chunk: Chunk {
                code: [
                    ReadUpvalue {
                        index: 0,
                    },
                    Print,
                ],
            },
        },
        upvalues: [
            Upvalue {
                index: 0,
                is_local: false,
            },
        ],
    },
)
stack: [<func outer>, <func middle>, <func inner>]
stdout: "return from outer\n"

execute: Some(
    String(
        "create inner closure",
    ),
)
stack: [<func outer>, <func middle>, <func inner>, create inner closure]
stdout: "return from outer\n"

execute: Some(
    Print,
)
stack: [<func outer>, <func middle>, <func inner>]
stdout: "return from outer\ncreate inner closure\n"

execute: Some(
    ReadLocalVariable {
        index_in_stack: 0,
    },
)
stack: [<func outer>, <func middle>, <func inner>, <func inner>]
stdout: "return from outer\ncreate inner closure\n"

execute: Some(
    Return,
)
stack: [<func outer>, <func middle>, <func inner>]
stdout: "return from outer\ncreate inner closure\n"

execute: Some(
    GlobalVarDeclaration {
        name: "in",
    },
)
stack: [<func outer>, <func middle>]
stdout: "return from outer\ncreate inner closure\n"

execute: Some(
    ReadGlobalVariable {
        name: "in",
    },
)
stack: [<func outer>, <func middle>, <func inner>]
stdout: "return from outer\ncreate inner closure\n"

execute: Some(
    Call {
        arity: 0,
    },
)
stack: [<func outer>, <func middle>, <func inner>]
stdout: "return from outer\ncreate inner closure\n"

execute: Some(
    ReadUpvalue {
        index: 0,
    },
)
stack: [<func outer>, <func middle>, <func inner>, value]
stdout: "return from outer\ncreate inner closure\n"

execute: Some(
    Print,
)
stack: [<func outer>, <func middle>, <func inner>]
stdout: "return from outer\ncreate inner closure\nvalue\n"

execute: None
stack: [<func outer>, <func middle>, <func inner>]
stdout: "return from outer\ncreate inner closure\nvalue\n"

execute: Some(
    Pop,
)
stack: [<func outer>, <func middle>]
stdout: "return from outer\ncreate inner closure\nvalue\n"

execute: None
stack: []
stdout: "return from outer\ncreate inner closure\nvalue\n"

