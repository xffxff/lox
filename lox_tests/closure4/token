TokenTree {
    source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
    tokens: [
        Alphabetic(fun),
        Whitespace(' '),
        Alphabetic(outer),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                tokens: [],
            },
        ),
        Delimiter()),
        Whitespace(' '),
        Delimiter({),
        Tree(
            TokenTree {
                source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                tokens: [
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(var),
                    Whitespace(' '),
                    Alphabetic(x),
                    Whitespace(' '),
                    Op(=),
                    Whitespace(' '),
                    String(value),
                    Semicolon,
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(fun),
                    Whitespace(' '),
                    Alphabetic(middle),
                    Delimiter((),
                    Tree(
                        TokenTree {
                            source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                            tokens: [],
                        },
                    ),
                    Delimiter()),
                    Whitespace(' '),
                    Delimiter({),
                    Tree(
                        TokenTree {
                            source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                            tokens: [
                                Whitespace('\n'),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Alphabetic(fun),
                                Whitespace(' '),
                                Alphabetic(inner),
                                Delimiter((),
                                Tree(
                                    TokenTree {
                                        source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                                        tokens: [],
                                    },
                                ),
                                Delimiter()),
                                Whitespace(' '),
                                Delimiter({),
                                Tree(
                                    TokenTree {
                                        source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                                        tokens: [
                                            Whitespace('\n'),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Alphabetic(print),
                                            Whitespace(' '),
                                            Alphabetic(x),
                                            Semicolon,
                                            Whitespace('\n'),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                            Whitespace(' '),
                                        ],
                                    },
                                ),
                                Delimiter(}),
                                Whitespace('\n'),
                                Whitespace('\n'),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Alphabetic(print),
                                Whitespace(' '),
                                String(create inner closure),
                                Semicolon,
                                Whitespace('\n'),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Whitespace(' '),
                                Alphabetic(return),
                                Whitespace(' '),
                                Alphabetic(inner),
                                Semicolon,
                                Whitespace('\n'),
                                Whitespace(' '),
                                Whitespace(' '),
                            ],
                        },
                    ),
                    Delimiter(}),
                    Whitespace('\n'),
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(print),
                    Whitespace(' '),
                    String(return from outer),
                    Semicolon,
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(return),
                    Whitespace(' '),
                    Alphabetic(middle),
                    Semicolon,
                    Whitespace('\n'),
                ],
            },
        ),
        Delimiter(}),
        Whitespace('\n'),
        Whitespace('\n'),
        Alphabetic(var),
        Whitespace(' '),
        Alphabetic(mid),
        Whitespace(' '),
        Op(=),
        Whitespace(' '),
        Alphabetic(outer),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                tokens: [],
            },
        ),
        Delimiter()),
        Semicolon,
        Whitespace('\n'),
        Alphabetic(var),
        Whitespace(' '),
        Alphabetic(in),
        Whitespace(' '),
        Op(=),
        Whitespace(' '),
        Alphabetic(mid),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                tokens: [],
            },
        ),
        Delimiter()),
        Semicolon,
        Whitespace('\n'),
        Alphabetic(in),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun outer() {\n  var x = \"value\";\n  fun middle() {\n    fun inner() {\n      print x;\n    }\n\n    print \"create inner closure\";\n    return inner;\n  }\n\n  print \"return from outer\";\n  return middle;\n}\n\nvar mid = outer();\nvar in = mid();\nin();",
                tokens: [],
            },
        ),
        Delimiter()),
        Semicolon,
    ],
}