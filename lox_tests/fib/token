TokenTree {
    source text: "fun fib(n) {\n    if (n <= 1) { return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n\nprint fib(5);",
    span: Span {
        start: Offset(
            0,
        ),
        end: Offset(
            94,
        ),
    },
    tokens: [
        Alphabetic(fun),
        Whitespace(' '),
        Alphabetic(fib),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun fib(n) {\n    if (n <= 1) { return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n\nprint fib(5);",
                span: Span {
                    start: Offset(
                        8,
                    ),
                    end: Offset(
                        9,
                    ),
                },
                tokens: [
                    Alphabetic(n),
                ],
            },
        ),
        Delimiter()),
        Whitespace(' '),
        Delimiter({),
        Tree(
            TokenTree {
                source text: "fun fib(n) {\n    if (n <= 1) { return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n\nprint fib(5);",
                span: Span {
                    start: Offset(
                        12,
                    ),
                    end: Offset(
                        79,
                    ),
                },
                tokens: [
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(if),
                    Whitespace(' '),
                    Delimiter((),
                    Tree(
                        TokenTree {
                            source text: "fun fib(n) {\n    if (n <= 1) { return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n\nprint fib(5);",
                            span: Span {
                                start: Offset(
                                    21,
                                ),
                                end: Offset(
                                    27,
                                ),
                            },
                            tokens: [
                                Alphabetic(n),
                                Whitespace(' '),
                                Op(<),
                                Op(=),
                                Whitespace(' '),
                                Number(1),
                            ],
                        },
                    ),
                    Delimiter()),
                    Whitespace(' '),
                    Delimiter({),
                    Tree(
                        TokenTree {
                            source text: "fun fib(n) {\n    if (n <= 1) { return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n\nprint fib(5);",
                            span: Span {
                                start: Offset(
                                    30,
                                ),
                                end: Offset(
                                    41,
                                ),
                            },
                            tokens: [
                                Whitespace(' '),
                                Alphabetic(return),
                                Whitespace(' '),
                                Alphabetic(n),
                                Semicolon,
                                Whitespace(' '),
                            ],
                        },
                    ),
                    Delimiter(}),
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(return),
                    Whitespace(' '),
                    Alphabetic(fib),
                    Delimiter((),
                    Tree(
                        TokenTree {
                            source text: "fun fib(n) {\n    if (n <= 1) { return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n\nprint fib(5);",
                            span: Span {
                                start: Offset(
                                    58,
                                ),
                                end: Offset(
                                    63,
                                ),
                            },
                            tokens: [
                                Alphabetic(n),
                                Whitespace(' '),
                                Op(-),
                                Whitespace(' '),
                                Number(1),
                            ],
                        },
                    ),
                    Delimiter()),
                    Whitespace(' '),
                    Op(+),
                    Whitespace(' '),
                    Alphabetic(fib),
                    Delimiter((),
                    Tree(
                        TokenTree {
                            source text: "fun fib(n) {\n    if (n <= 1) { return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n\nprint fib(5);",
                            span: Span {
                                start: Offset(
                                    71,
                                ),
                                end: Offset(
                                    76,
                                ),
                            },
                            tokens: [
                                Alphabetic(n),
                                Whitespace(' '),
                                Op(-),
                                Whitespace(' '),
                                Number(2),
                            ],
                        },
                    ),
                    Delimiter()),
                    Semicolon,
                    Whitespace('\n'),
                ],
            },
        ),
        Delimiter(}),
        Whitespace('\n'),
        Whitespace('\n'),
        Alphabetic(print),
        Whitespace(' '),
        Alphabetic(fib),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun fib(n) {\n    if (n <= 1) { return n; }\n    return fib(n - 1) + fib(n - 2);\n}\n\nprint fib(5);",
                span: Span {
                    start: Offset(
                        92,
                    ),
                    end: Offset(
                        93,
                    ),
                },
                tokens: [
                    Number(5),
                ],
            },
        ),
        Delimiter()),
        Semicolon,
    ],
}