TokenTree {
    source text: "fun hello() {\n    print \"hello\";\n}\n\nhello();\nprint \"world\";\n\nfun add(a, b) {\n    return a + b;\n}\n\nvar c = add(1, 2);\nprint c;",
    tokens: [
        Alphabetic(fun),
        Whitespace(' '),
        Alphabetic(hello),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun hello() {\n    print \"hello\";\n}\n\nhello();\nprint \"world\";\n\nfun add(a, b) {\n    return a + b;\n}\n\nvar c = add(1, 2);\nprint c;",
                tokens: [],
            },
        ),
        Delimiter()),
        Whitespace(' '),
        Delimiter({),
        Tree(
            TokenTree {
                source text: "fun hello() {\n    print \"hello\";\n}\n\nhello();\nprint \"world\";\n\nfun add(a, b) {\n    return a + b;\n}\n\nvar c = add(1, 2);\nprint c;",
                tokens: [
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(print),
                    Whitespace(' '),
                    String(hello),
                    Semicolon,
                    Whitespace('\n'),
                ],
            },
        ),
        Delimiter(}),
        Whitespace('\n'),
        Whitespace('\n'),
        Alphabetic(hello),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun hello() {\n    print \"hello\";\n}\n\nhello();\nprint \"world\";\n\nfun add(a, b) {\n    return a + b;\n}\n\nvar c = add(1, 2);\nprint c;",
                tokens: [],
            },
        ),
        Delimiter()),
        Semicolon,
        Whitespace('\n'),
        Alphabetic(print),
        Whitespace(' '),
        String(world),
        Semicolon,
        Whitespace('\n'),
        Whitespace('\n'),
        Alphabetic(fun),
        Whitespace(' '),
        Alphabetic(add),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun hello() {\n    print \"hello\";\n}\n\nhello();\nprint \"world\";\n\nfun add(a, b) {\n    return a + b;\n}\n\nvar c = add(1, 2);\nprint c;",
                tokens: [
                    Alphabetic(a),
                    Comma,
                    Whitespace(' '),
                    Alphabetic(b),
                ],
            },
        ),
        Delimiter()),
        Whitespace(' '),
        Delimiter({),
        Tree(
            TokenTree {
                source text: "fun hello() {\n    print \"hello\";\n}\n\nhello();\nprint \"world\";\n\nfun add(a, b) {\n    return a + b;\n}\n\nvar c = add(1, 2);\nprint c;",
                tokens: [
                    Whitespace('\n'),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Whitespace(' '),
                    Alphabetic(return),
                    Whitespace(' '),
                    Alphabetic(a),
                    Whitespace(' '),
                    Op(+),
                    Whitespace(' '),
                    Alphabetic(b),
                    Semicolon,
                    Whitespace('\n'),
                ],
            },
        ),
        Delimiter(}),
        Whitespace('\n'),
        Whitespace('\n'),
        Alphabetic(var),
        Whitespace(' '),
        Alphabetic(c),
        Whitespace(' '),
        Op(=),
        Whitespace(' '),
        Alphabetic(add),
        Delimiter((),
        Tree(
            TokenTree {
                source text: "fun hello() {\n    print \"hello\";\n}\n\nhello();\nprint \"world\";\n\nfun add(a, b) {\n    return a + b;\n}\n\nvar c = add(1, 2);\nprint c;",
                tokens: [
                    Number(1),
                    Comma,
                    Whitespace(' '),
                    Number(2),
                ],
            },
        ),
        Delimiter()),
        Semicolon,
        Whitespace('\n'),
        Alphabetic(print),
        Whitespace(' '),
        Alphabetic(c),
        Semicolon,
    ],
}